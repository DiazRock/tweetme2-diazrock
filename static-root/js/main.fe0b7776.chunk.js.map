{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","useRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","console","log","current","newVal","value","tempNewTweets","unshift","content","likes","id","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","tweet","ActionBtn","action","setLikes","userLike","UserLike","setUserLike","actionDisplay","display","onClick","Tweet","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","tweetsEl"],"mappings":"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","file":"static/js/main.fe0b7776.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState, useRef} from 'react'\nimport {loadTweets} from '../lookup'\n\n\nexport function TweetsComponent (props){\n    const textAreaRef = useRef()\n    const [newTweets, setNewTweets] = useState([])\n    \n    const handleSubmint = (event) => {\n      event.preventDefault()\n      console.log(textAreaRef.current)    \n      const newVal = textAreaRef.current.value\n      const tempNewTweets = [...newTweets]\n      tempNewTweets.unshift({\n        content: newVal,\n        likes: 0,\n        id: 1234\n      })\n      setNewTweets(tempNewTweets)\n      textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n      <div className= 'col-12 mb-3'>\n        <form onSubmit={handleSubmint}>\n          <textarea className='form-control' name= 'tweet'>\n\n          </textarea>\n          <button type='submit' className= 'btn btn-primary my-3'>Tweet</button>\n        </form>\n      </div>\n      <TweetsList newTweets={newTweets}/>\n    </div> \n}\n  \nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    \n    useEffect(() => {\n      const final= [...props.newTweets].concat(tweetsInit)\n      if (final.length !== tweets.length){\n        setTweets(final)\n      }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n      const myCallback = (response, status) =>{\n        if (status === 200) {    \n          setTweetsInit(response)\n        } else {\n          alert('There was an error')\n        }\n    }\n      loadTweets(myCallback)\n    })\n    return tweetsInit.map (\n      (item, index) => {\n        return <Tweet \n                tweet={item} \n                key={`${index}-{item.id}`} \n                className= 'my-5 py-5 border bg-white text-dark'/>\n      }\n  )\n  }\n  \n\nexport const ActionBtn = (props) => {\n    const { tweet, action } = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes: 0)\n    const [UserLike, setUserLike] = useState(tweet.userLike)\n    const className = props.className ? props.className : 'btn btn-outline-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    const handleClick = (event) => {\n      event.preventDefault()\n      if (action.type === 'like'){\n        if (UserLike) {\n          setUserLike(false)\n          setLikes(likes - 1)\n        } else {\n          setUserLike(true)\n          setLikes(likes + 1)\n\n        }\n        \n      }\n    }\n    return <button className={className} onClick={handleClick} > {display} </button> \n  }\n  \nexport const Tweet = (props) => {\n    const { tweet } = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n      <p> {tweet.id} - { tweet.content} </p>\n      <div className='btn btn-group'>\n        <ActionBtn tweet={tweet} action= {{type: 'like', display:'Likes'}}/>\n        <ActionBtn tweet={tweet} action= {{type: 'unlike', display: 'Unlike'}}/>\n        <ActionBtn tweet={tweet} action= {{type: 'retweet', display:'Retweet'}}/>\n      </div>\n    </div>\n  }\n","export const loadTweets = (callback) => {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = \"//tweetme2-diazrock.herokuapp.com/api/tweets/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function () {\n          callback(xhr.response, xhr.status)\n        }\n    xhr.onerror = (e) => {\n      console.log(e)\n      callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send()\n  }\n","import React from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport { TweetsComponent } from './tweets'\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n          <TweetsComponent />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets/'\nimport reportWebVitals from './reportWebVitals';\n\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(<App/>, appEl);\n}\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n  ReactDOM.render(<TweetsComponent />, tweetsEl)\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}